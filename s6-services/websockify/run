#!/usr/bin/with-contenv sh

# Ensure log directory exists
mkdir -p /app/logs

# Wait for the X server to become available before launching Selkies.
# When Selkies starts too early pynput fails to connect to the display
# which causes an ImportError and the service restarts in a loop.
if [ -n "${DISPLAY}" ]; then
  for _ in $(seq 1 30); do
    if xset q >/dev/null 2>&1; then
      break
    fi
    sleep 1
  done
fi

# Completely disable X Shared Memory usage.  The container environment
# lacks proper MIT-SHM support which causes Selkies to abort if the
# extension is enabled.
export SELKIES_DISABLE_XSHM=1
export PIXELFLUX_DISABLE_XSHM=1

# Spawn a minimal PulseAudio instance with a dummy sink so that Selkies'
# internal pulsectl probes succeed even though no real audio hardware is
# available.  This avoids repeated connection failures when the data
# websocket initializes.
pulseaudio -D --exit-idle-time=-1 \
  --load="module-null-sink sink_name=output" --log-level=error 2>/dev/null

# Give PulseAudio a moment to come up
for _ in $(seq 1 10); do
  pactl info >/dev/null 2>&1 && break
  sleep 1
done

# Launch Selkies in websocket mode with XSHM disabled.  Audio is still
# disabled at the application level, but the presence of a dummy
# PulseAudio server prevents startup crashes.
exec selkies --addr="localhost" --mode="websockets" \
    --disable-xshm --no-audio >> /app/logs/selkies.log 2>&1
