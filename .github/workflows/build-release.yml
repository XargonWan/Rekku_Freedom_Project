name: "Rekku Freedom Project - Release"

on:
  push:
    branches:
      - "main"
      - "develop"
      - "fix/**"
      - "feat/**"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "fix/**"
      - "feat/**"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.14
      with:
        versionSpec: '5.x'

    - name: Determine version with GitVersion
      id: gitversion_build
      uses: gittools/actions/gitversion/execute@v0.9.14
      with:
        useConfigFile: true

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:${{ steps.gitversion_build.outputs.semVer }}

    - name: Tag image as latest (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:${{ steps.gitversion_build.outputs.semVer }} ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:latest

    - name: Tag image as latest-develop (develop branch only)
      if: github.ref == 'refs/heads/develop'
      run: |
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:${{ steps.gitversion_build.outputs.semVer }} ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:latest-develop
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:latest-develop

    - name: Tag image for non-main and non-develop branches
      if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop'
      run: |
        branch_name=${GITHUB_REF#refs/heads/}
        branch_name=${branch_name#refs/pull/}
        sanitized_branch_name=$(echo "$branch_name" | sed 's|/|-|g')
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:${{ steps.gitversion_build.outputs.semVer }} ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:${{ steps.gitversion_build.outputs.semVer }}-$sanitized_branch_name
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project:${{ steps.gitversion_build.outputs.semVer }}-$sanitized_branch_name

  unit-tests:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Create mock .env file
        run: |
          cat <<'EOF' > .env
          BOTFATHER_TOKEN=dummy
          TRAINER_ID=123456789
          OPENAI_API_KEY=dummy
          DB_HOST=localhost
          DB_USER=rekku
          DB_PASS=rekku
          DB_NAME=rekku
          TELEGRAM_API_ID=0
          TELEGRAM_API_HASH=dummy
          TELEGRAM_PHONE_NUMBER=dummy
          EOF
      - name: Set up virtual environment
        run: python -m venv .venv
      - name: Run unit tests
        id: run-tests
        run: |
          set +e
          LOG_DIR=./logs ./run_tests.sh
          exit_code=$?
          echo "exit_code=$exit_code" >> "$GITHUB_OUTPUT"
          exit $exit_code
        continue-on-error: true
      - name: Report unit test result
        if: always()
        run: |
          if [ "${{ steps.run-tests.outputs.exit_code }}" != '0' ]; then
            echo "❌ Unit tests failed with exit code ${{ steps.run-tests.outputs.exit_code }}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "✅ Unit tests passed" >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Upload unit test report
        if: always()
        uses: actions/upload-test-report@v1
        with:
          name: unit-tests
          path: test-results

  cleanup-images:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Remove dangling and old PR images from Docker Hub
        env:
          USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          repo="$USERNAME/rekku_freedom_project"
          token=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$USERNAME\", \"password\": \"$PASSWORD\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)

          # Delete untagged images
          curl -s -H "Authorization: JWT $token" "https://hub.docker.com/v2/repositories/$repo/images?page_size=100" | \
            jq -r '.results[] | select((.digest != null) and (.tags | length == 0)) | .digest' | while read digest; do
              echo "Deleting dangling image $digest"
              curl -s -H "Authorization: JWT $token" -X DELETE "https://hub.docker.com/v2/repositories/$repo/images/$digest/"
            done

          # Delete PR tags older than two weeks
          cutoff=$(date -u -d '14 days ago' +%s)
          curl -s -H "Authorization: JWT $token" "https://hub.docker.com/v2/repositories/$repo/tags?page_size=100" | \
            jq -r '.results[] | .name + " " + .last_updated' | while read name updated; do
              if [[ "$name" == *-pr-* ]]; then
                ts=$(date -u -d "$updated" +%s)
                if [ $ts -lt $cutoff ]; then
                  echo "Deleting tag $name (older than two weeks)"
                  curl -s -H "Authorization: JWT $token" -X DELETE "https://hub.docker.com/v2/repositories/$repo/tags/$name/"
                fi
              fi
            done

