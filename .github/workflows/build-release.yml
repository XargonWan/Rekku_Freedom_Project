name: "Rekku Freedom Project - Release"

on:
  push:
    branches:
      - "main"
      - "develop"
      - "fix/**"
      - "feat/**"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "fix/**"
      - "feat/**"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '5.x'

      - name: Determine version with GitVersion
        id: gitversion
        run: |
          output=$(dotnet-gitversion /config GitVersion.yml /output json 2>&1)
          echo "$output"
          json=$(echo "$output" | awk 'BEGIN{found=0} /^\s*{/ {found=1} {if (found) print} /^\s*}/ {exit}')
          if echo "$json" | jq empty >/dev/null 2>&1; then
            semver=$(echo "$json" | jq -r '.SemVer')
            echo "semVer=${semver}" >> "$GITHUB_OUTPUT"
          else
            echo "::error::dotnet-gitversion did not produce valid JSON"
            exit 1
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute image tags
        id: meta
        env:
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/rekku_freedom_project
          SEMVER: ${{ steps.gitversion.outputs.semVer }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          tags=""
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            tags="$IMAGE_NAME:pr$PR_NUMBER-$SEMVER"
          elif [ "$GITHUB_REF" = "refs/heads/main" ]; then
            tags="$IMAGE_NAME:$SEMVER,$IMAGE_NAME:latest"
          elif [ "$GITHUB_REF" = "refs/heads/develop" ]; then
            tags="$IMAGE_NAME:develop-$SEMVER,$IMAGE_NAME:latest-develop"
          else
            branch="${GITHUB_REF#refs/heads/}"
            sanitized=$(echo "$branch" | tr '/' '-')
            tags="$IMAGE_NAME:$sanitized-$SEMVER"
          fi
          echo "tags=$tags" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            GITVERSION_TAG=${{ steps.gitversion.outputs.semVer }}
          tags: ${{ steps.meta.outputs.tags }}

  cleanup-images:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: build-and-push
    steps:
      - name: Remove dangling and old PR images from Docker Hub
        env:
          USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          repo="$USERNAME/rekku_freedom_project"
          token=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$USERNAME\", \"password\": \"$PASSWORD\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)

          # Delete untagged images
          curl -s -H "Authorization: JWT $token" "https://hub.docker.com/v2/repositories/$repo/images?page_size=100" | \
            jq -r '.results[] | select((.digest != null) and (.tags | length == 0)) | .digest' | while read digest; do
              echo "Deleting dangling image $digest"
              curl -s -H "Authorization: JWT $token" -X DELETE "https://hub.docker.com/v2/repositories/$repo/images/$digest/"
            done

          # Delete PR tags older than two weeks
          cutoff=$(date -u -d '14 days ago' +%s)
          curl -s -H "Authorization: JWT $token" "https://hub.docker.com/v2/repositories/$repo/tags?page_size=100" | \
            jq -r '.results[] | .name + " " + .last_updated' | while read name updated; do
              if [[ "$name" == pr* ]]; then
                ts=$(date -u -d "$updated" +%s)
                if [ $ts -lt $cutoff ]; then
                  echo "Deleting tag $name (older than two weeks)"
                  curl -s -H "Authorization: JWT $token" -X DELETE "https://hub.docker.com/v2/repositories/$repo/tags/$name/"
                fi
              fi
            done
